

#<Строка сnециального формата> % <Значения>
#Cт.сп.знач. принимает значения:
# % [(<Ключ>)][<Флаг>][<Ширина>][.<Точность>]<Тиn nреобразования>

#Ключ - ключ словаря
#Если задан ключ - в значениях д.быть словарь
print("%(name)s - %(year)s" % {"year": 1978, "name": "Nik"})

#Флаг - флаг преобразования
#  # - для восьмеричных, добавл.в начало 0о
print("%#o %#o %#x" % (0o77, 10, 10))
#  0 - число нулей в начале
print("'%d' - '%05d'" % (3,3)) #5 - ширина поля
# пробел - будет вставлперед полож. числами
print("'% d' - '% d'" % (-3, 3))
# + - обязательный вывод знака
print("'%+d' - '%+d'" % (-3, 3))


#Ширина - минимальная ширина поля. Дефолт - полный вывод строки
print("'%10d' - '%-10d'" % (3, 3))

#Точность - количество знаков после точки для вещественных чисел.
import math
print("%s %f %.2f" % (math.pi, math.pi, math.pi))

#Тип преобразования - ОБЯЗАТЕЛЬНЫЙ параметр
#s - to string via str()
#r  to string via repr()
#a - to string via ascii()
#c -одиночный символ/преобразование числа в символ
#d, i - елая часть числа
#остальное ситуативно

print()
print("Метод format(): ")
#Метод format() ################################
# <Строка> = <Строка сnециального фopмaтa>.format(*args, **kwargs)
print("Символы {{ и }} - {0}".format("сnециальные"))

# В одинарных  { } указывается строка формата {[<Поле>] [!<Функция>] [:<Формат>]}
a = "{0} - {1} - {2}".format(10, 12.3, "string") #Индексы
arr = [10, 12.3, "string"]
b = "{0}- {1}- {2}".format(*arr) #ИНдексы
c = "{model}- {color}".format(color="red", model="BМW") #Ключи
dict = {"color": "red", "model": "ВМW"}
d = "{model} - {color}".format(**dict) #Ключи
e = "{color} - {0}".format(2010, color="red") #Комбинация
print(a,b,c,d,e,sep="\n")

#Объект в качестве параметра
arr = [10, [12.3, "string"] ]
a1 = "{0[0]}- {0[1][0]}- {0[1][1]}".format(arr)
a2 = "{arr[0]} - {arr[1][1]}".format(arr=arr)
print(a1,a2,sep = "\n")

#Параметр Функция задает ф-ю, с помощью которой обраб-ся строка
#ascii(),str(),repr()

print("{0!s}".format("строка"))
print("{0!r}".format("строка"))
print("{0!a}".format("cтpoкa"))

#В апараметре Формат задается следующее значение
#[ [<Заполнитель>] <Выравнивание>] [<Знак>] [ #] [О] [<Ширина>] [,]
#[.<Точность>] [ <Преобразование>]

#Ширина - минимальная ширина поля
print("'{0:10}' '{1:3}'".format(3, "string"))

#Выравнивание - < -по левому краю, > -по правому, ^ -по центру
print("'{0:<10}' '{1:>10}' '{2:^10}'".format(3, 3, 3))
# = -знак по левому краю, число по правому
print("'{0:=10}' '{1:=10}'".format(-3, 3))
#Для заполнения пустого места нулями пишем {0:=010}
#Тот же эффект с помощью параметра Заполнитель
print("'{0:*<10}' '{1:+>10}' '{2:.^10}'".format(3, 3, 3))

#Всё остальное ситуативно


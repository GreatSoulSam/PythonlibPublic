

# Если в куче изменяется один из элементов, то она может перестать
# удовлетворять свойству упорядоченности. Для восстановления этого свойства
# служат процедуры siftDown (просеивание вниз) и siftUp (просеивание вверх).

# Если значение измененного элемента увеличивается,
# то свойства кучи восстанавливаются функцией siftDown.
def siftDown(i):
    while 2*i+1 <= len(a)-1:
        j=i
        if a[2*i+1]>a[i]:
            j=2*i+1
        if 2*i+2<= len(a)-1 and a[2*i+2]>a[j]:
            j=2*i+2
        if i==j:
            break
        else:
            a[i],a[j]=a[j],a[i]
            i=j

# Если значение измененного элемента уменьшается,
# то свойства кучи восстанавливаются функцией siftUp.
def siftUp(i):
    while i > 0 and a[(i - 1) // 2] < a[i]:
        a[i], a[(i - 1) // 2] = a[(i - 1) // 2], a[i]
        i = (i - 1) // 2

a=[]
for _ in range(int(input())):
    # Считываем команды
    c = input().split()

    if len(c) == 2:
        a.append(int(c[1]))
        siftUp(len(a) - 1)

    else:
        print(a[0])
        a[0] = a[-1]
        a.pop()
        siftDown(0)
